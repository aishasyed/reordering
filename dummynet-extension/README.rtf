{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
\cocoascreenfonts1{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19780\viewh10460\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf0 THE FILES\
\
All files are present in the sync/ directory. `cd` into this directory before starting.\'a0I haven't hard-coded any paths to my home directory, so this directory should easily be copyable elsewhere. The file structure is like this:\
\
/sync                       --- [the directory with everything needed to enable reordering in Dummynet]\
|\
|-- Makefile                --- the Makefile which automates everything\
|-- Makefile.patch          --- a patch for the dummynet Makefile\
|-- input.txt               --- the reorder sequence input\
|\
|-- ipfw                    --- [the kernel module source]\
|   |-- dn_reorder.h        --- implementation of a reordering queue\
|   |-- dn_sched_reorder.c  --- dummynet scheduler\
|   `-- reordering.h        --- generated by scanner.c based on input.txt\
|\
|-- scanner.c               --- a program which reads input.txt and\
|                               generates ipfw/reordering.h\
|-- udpclient.c             --- a UDP client which sends packets to\
|                               node1\
|-- udpserver.c             --- a UDP server which receives and prints\
|                               packets\
|\
|-- scanner                 \\\
|-- udpclient               |-- binaries based on above source code\
`-- udpserver               /\
\
Everything is automated via the Makefile. Please read the Makefile to\
see all the commands that it runs. \
_____________________\
SETTING UP THE SYSTEM\
\
On a newly swapped in system in Emulab, run:\
\
  > sudo make freebsd\
\
This will copy the FreeBSD sources to the appropriate place, and patch\
the ipfw Makefile to include the reorder schedular source.\
\
This is only required once when the system is swapped in.\
\
______________________\
BUILDING THE SCHEDULER\
\
Run:\
\
  > sudo make dummy\
\
This will:\
1. Take a reorder sequence from the file named 'input.txt' and use the\
   'scanner' program to generate a 'ipfw/reordering.h' with that data\
2. Copy all relevant .c and .h files to the appropriate location\
3. Build dummynet\
4. Unload dummynet, and load our version of dummynet\
5. Show status of dummynet including loaded schedulers\
6. Setup the appropriate queue and scheduler (and get rid of some\
   default rules which interfere with the traffic)\
\
Note, the last step is required. ipfw needs to be reconfigured after\
it's reloaded. This wasn't very clear from the manual, and `ipfw show`\
still show the previous configuration after reload, even though it\
isn't actually applied.\
\
____________________\
THE REORDER SEQUENCE\
\
The reorder sequence is specified in a file named 'input.txt'. When\
you edit the file, simply rebuild and reload the scheduler by running\
`sudo make dummy` again.\
\
The file is just a sequence of numbers separated by whitespace,\
starting with 1, with appropriate reordering applied. e.g., currently with file\
contents '5 4 3 2 1', the scheduler takes 5 packets in, and sends\
them out in reverse order. You can modify this input file if you want see a different kind of reordering.\
\
Our RD sequence regeneration algorithm implementations (RDSolver.c or RDSolver.py) can be used to\
generate this input.txt file but the user is free to choose any other reordering metrics as well.\
\
_____________________________\
TESTING THE REORDER SCHEDULER\
\
`sudo make dummy` sets up the scheduler for node0->node1 IP traffic.\
No other setup is needed.\
\
On node1:\
  ~/sync> ./udpserver\
\
On node0:\
  ~/sync> ./udpclient\
\
The client sends 20 packets to the server on every execution, and the\
server prints them out. You can see the re-ordering applied in the\
server's output. The client can be executed multiple times.\
\
Note: On the first execution, some of the first packets are usually\
lost. This is not related to my scheduler, and also happens with other\
schedulers.\
\
____\
ICMP\
\
We did not use ICMP for testing because of certain issues. The `ping`\
command sends three packets at a time, and then waits for them before\
sending more. dummynet applies a lot of flowsets, and the delay in\
ICMP often leads to different packets going to different flowsets, and\
the ping command just waits there. When the flowsets fill up, it\
starts getting packets, but the huge delay and random order makes it\
act very weirdly.\
\
The multiple flowset issue also happens when the UDP client sends\
messages with a delay after every message. I haven't figured out how\
to disable flowsets in dummynet. That's why I made `udpclient` send 20\
packets at a time, which clearly shows the reordering happening\
properly.\
}